{
  "header": {
    "about": "О проекте",
    "binary": "Бинарное дерево",
    "avl": "АВЛ дерево"
  },
  "about": {
    "title": "О нас",
    "p1": "Ку! Вы находитесь на учебном портале, который поможет Вам разобраться с деревьями, их стояниями и методами. Написано это все дело в рамках дипломного проекта двумя(одним) авантюристами(студентами).",
    "p2": "Деревья, которые здесь представлены:",
    "p2l1": "Двоичное дерево поиска – иерархическая структура данных, в которой каждый узел имеет не более двух потомков. Как правило, первый называется родительским узлом, а дети называются левым и правым наследниками.",
    "p2l2": "АВЛ-дерево – сбалансированное по высоте двоичное дерево поиска: для каждой его вершины высота её двух поддеревьев различается не более чем на один. АВЛ — аббревиатура, образованная первыми буквами фамилий создателей (советских учёных) Адельсон-Вельского Георгия Максимовича и Ландиса Евгения Михайловича. Было изобретено в 1962 году.",
    "bt1": "Двоичное дерево поиска – это двоичное дерево, для которого выполняются следующие дополнительные условия:",
    "bt1l1": "Оба поддерева — левое и правое — являются двоичными деревьями поиска.",
    "bt1l2": "У всех узлов левого поддерева произвольного узла X значения ключей данных меньше, нежели значение ключа данных самого узла X.",
    "bt1l3": "У всех узлов правого поддерева произвольного узла X значения ключей данных больше либо равны, нежели значение ключа данных самого узла X.",
    "bt2": "Основным преимуществом двоичного дерева поиска перед другими структурами данных является возможная высокая эффективность реализации основанных на нём алгоритмов поиска и сортировки.",
    "bt3": "Основные операции в двоичном дереве поиска:",
    "bt3l1": "FIND(K) — поиск узла, в котором хранится пара (key, value) с key = K.",
    "bt3l2": "INSERT(K,V) — добавление в дерево пары (key, value) = (K, V).",
    "bt3l3": "REMOVE(K) — удаление узла, в котором хранится пара (key, value) с key = K.",
    "avl1": "АВЛ-дерево – самобалансируемое двоичное дерево поиска. Сохраняет все основные свойства двоичного дерева поиска, и добавляет одно новое свойство: для каждой его вершины высота её двух поддеревьев различается не более чем на 1. Базовые опервации остаються такими же как и в бинарном дереве поиска."
  },
  "binary": {
    "title": "Бинарное дерево",
    "i1": "Вставка нового узла",
    "i2": "Новый узел",
    "i3": "< узла",
    "i4": ", и левый потомок не пустой => узел",
    "i5": "левый потомок = узел",
    "i6": "Узел добавлен!",
    "i7": ", и левый потомк не пустой => переходим в левое поддерево",
    "i8": "> узла",
    "i9": "и правый потомок не пустой => узел",
    "i10": "правый потомок = узел",
    "i11": "и правый потомк не пустой => переходим в правое поддерево",
    "r1": "Удаление узла",
    "r2": "Дерево пустое!",
    "r3": "Узел",
    "r4": " => переходим в левое поддерево",
    "r5": " => переходим в правое поддерево",
    "r6": "= узел",
    "r7": "и узел не имеет потомков => узел",
    "r8": "= null. Узел удалён!",
    "r9": "и узел имеет правого потомка => узел",
    "r10": "= правое поддерево. Узел удалён!",
    "r11": "и узел имеет лувого потомка => узел",
    "r12": "= левое поддерево. Узел удалён!",
    "r13": "и узел имеет двух потомков => узел",
    "r14": "= минимальный узел из правого поддерева(узел",
    "r15": "). Потом удалить узел",
    "r16": "из правого поддерева",
    "o1": "Pre-order обход",
    "o2": "Отобразить узел",
    "o3": "In-order обход",
    "o4": "Post-order обход",
    "s1": "Поиск узла",
    "s2": "Узла нету в дереве!",
    "s3": "Исокмый узел",
    "s4": "=> продолжить поиск в левом поддереве",
    "s5": "=> продолжить поиск в правом поддереве",
    "s6": "=> узел найден!",
    "s7": "Поиск минимального узла",
    "s8": "Минимальный узел найден!",
    "s9": "Левый потомк узла",
    "s10": "пустой => минимальный узел",
    "s11": "Узел",
    "s12": "имеет левого потомка => продолжить поиск в левом поддереве",
    "s13": "Поиск максимального узла",
    "s14": "Максимальный узел найден!",
    "s15": "Правый потомок узла",
    "s16": "пустой => максимальный узел",
    "s17": "Узел",
    "s18": "имеет правого потомка => продолжить поиск в правом поддереве"
  },
 "avl": {
    "title": "АВЛ дерево"
  },
  "legend": {
    "title": "Легенда",
    "initialized": "Дерево инициализировано."
  },
  "controls": {
    "node": "Узел",
    "add": "Добавить",
    "addE": "Добавить узел",
    "delete": "Удалить",
    "deleteE": "Удалить узел",
    "searche": "Найти",
    "searcheE": "Найти узел",
    "prev": "Назад",
    "prevE": "Шаг назад",
    "next": "Вперёд",
    "nextE": "Шаг Вперёд",
    "preorder": "Preorder",
    "preorderE": "Preorder обход",
    "inorder": "Inorder",
    "inorderE": "Inorder обход",
    "postorder": "Postorder",
    "postorderE": "Postorder обход",
    "min": "Min",
    "minE": "Найти минимальный узел",
    "max": "Max",
    "maxE": "Найти максимальный узел"
  }
}
