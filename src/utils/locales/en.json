{
  "header": {
    "about": "About",
    "binary": "Binary tree",
    "avl": "AVL tree"
  },
  "about": {
    "title": "About us",
    "p1": "Welcome! You are on the training portal, which will help you understand the trees, their standing and methods. It is written this whole thing within the framework of the diploma project by two (one) adventurers (students).",
    "p2": "Trees that are represented here: A red-black tree. The inventor of the red-black tree in 1972, consider the German Rudolf Bayer. The name \"red-black tree\" was obtained in the article by L. Gimpas and R. Sedgwick (1978). In the magazine were available two colors (red and black) and an additional bit, \"attached\" to each of the nodes, was indicated by color. AVL-tree. AVL is an abbreviation formed by the first letters of the names of the creators (Soviet scientists) Georgy Maksimovich Adelson-Velsky and Yevgeny Mikhailovich Landis. It was invented in 1962."
  },
  "binary": {
    "title": "Binary tree",
    "i1": "Inserting the new node",
    "i2": "New node",
    "i3": "< node",
    "i4": ", and left child is empty => node",
    "i5": "left child = node",
    "i6": "Node inserted!",
    "i7": ", and left child is not empty => go to the left subtree",
    "i8": "> node",
    "i9": "and right child is empty => node",
    "i10": "right child = node",
    "i11": "and right child is not empty => go to the right subtree",
    "r1": "Deleting the node",
    "r2": "Tree is empty!",
    "r3": "The node",
    "r4": " => go to the left subtree",
    "r5": " => go to the right subtree",
    "r6": "= node",
    "r7": "and node have not children => node",
    "r8": "= null. Node removed!",
    "r9": "and node have right children => node",
    "r10": "= right subtree. Node removed!",
    "r11": "and node have left children => node",
    "r12": "= left subtree. Node removed!",
    "r13": "and node have two children => node",
    "r14": "= min node from right subtree(node",
    "r15": "). Then delete node",
    "r16": "from right subtree",
    "o1": "Pre-order traversal",
    "o2": "Display node",
    "o3": "In-order traversal",
    "o4": "Post-order traversal",
    "s1": "Searching the node",
    "s2": "There is no node in the tree!",
    "s3": "Searched node",
    "s4": "=> continue search in the left subtree",
    "s5": "=> continue search in the right subtree",
    "s6": "=> node is found!",
    "s7": "Searching the min node",
    "s8": "The min node found!",
    "s9": "Left child of the node",
    "s10": "is empty => the min node is",
    "s11": "Node",
    "s12": "have a left child => continue search in the left subtree",
    "s13": "Searching the max node",
    "s14": "The max node found!",
    "s15": "Right child of the node",
    "s16": "is empty => the max node is",
    "s17": "Node",
    "s18": "have a right child => continue search in the right subtree"
  },
  "avl": {
    "title": "AVL tree"
  },
  "legend": {
    "title": "Legend",
    "initialized": "Tree is initialized."
  },
  "controls": {
    "node": "Node",
    "add": "Add",
    "addE": "Add node",
    "delete": "Delete",
    "deleteE": "Delete node",
    "searche": "Search",
    "searcheE": "Search node",
    "prev": "Prev",
    "prevE": "Prev step",
    "next": "Next",
    "nextE": "Next step",
    "preorder": "Preorder",
    "preorderE": "Preorder traversal",
    "inorder": "Inorder",
    "inorderE": "Inorder traversal",
    "postorder": "Postorder",
    "postorderE": "Postorder traversal",
    "min": "Min",
    "minE": "Find min node",
    "max": "Max",
    "maxE": "Find max node"
  }
}
