{
  "header": {
    "about": "Про проект",
    "binary": "Бінарне дерево",
    "avl": "АВЛ дерево"
  },
  "about": {
    "title": "Про нас",
    "p1": "Вітання! Ви знаходитесь на навчальному порталі, який допоможе Вам розібратися з деревами, їх будовою та методами. Написано ця вся справа в рамках дипломного проекту двома (одним) авантюристами (студентами).",
    "p2": "Дерева, які тут представлені:",
    "p2l1": "Бінарне дерево пошуку - ієрархічна структура даних, в якій кожен вузол має не більше двох нащадків. Як правило, перший називається батьківським вузлом, а діти називаються лівим і правим спадкоємцями.",
    "p2l2": "АВЛ-дерево - збалансоване по висоті бінарне дерево пошуку: для кожної його вершини висота її двох піддерев відрізняється не більше ніж на один. АВЛ - абревіатура, утворена першими літерами прізвищ авторів (радянських вчених) Адельсон-Бєльського Георгія Максимовича і Ландіса Євгена Михайловича. Було винайдено в 1962 році.",
    "bt1": "Бінарне дерево пошуку – це бінарне дерево, для якого виконуються наступні додаткові умови:",
    "bt1l1": "Обидва поддерева - ліве і праве - є бінарними деревами пошуку.",
    "bt1l2": "У всіх вузлів лівого піддерева довільного вузла X значення джерел інформації менше, ніж значення ключа даних самого вузла X.",
    "bt1l3": "У всіх вузлів правого піддерева довільного вузла X значення джерел інформації більше або рівні, ніж значення ключа даних самого вузла X.",
    "bt2": "Основною перевагою бінарного дерева пошуку перед іншими структурами даних є можлива висока ефективність реалізації заснованих на ньому алгоритмів пошуку і сортування.",
    "bt3": "Основні операції в бінарному дереві пошуку:",
    "bt3l1": "FIND (K) - пошук вузла, в якому зберігається пара (key, value) з key = K.",
    "bt3l2": "INSERT (K, V) - додавання в дерево пари (key, value) = (K, V).",
    "bt3l3": "REMOVE (K) - видалення вузла, в якому зберігається пара (key, value) з key = K.",
    "avl1": "АВЛ-дерево - самобалансоване бінарне дерево пошуку. Зберігає всі основні властивості двійкового дерева пошуку, і додає одну нову властивість: для кожної його вершини висота її двох піддерев відрізняється не більше ніж на 1. Базові опервації остаються такими ж як і в бінарному дереві пошуку."
  },
  "binary": {
    "title": "Бінарне дерево",
    "i1": "Вставка нового вузла",
    "i2": "Новий вузол",
    "i3": "<вузла",
    "i4": ", і лівий нащадок не порожній => вузол",
    "i5": "лівий нащадок = вузол",
    "i6": "Вузол доданий!",
    "i7": ", і лівий нащадки не порожній => переходимо в ліве піддерево",
    "i8": "> вузла",
    "i9": "і правий нащадок не порожній => вузол",
    "i10": "правий нащадок = вузол",
    "i11": "і правили нащадки не порожній => переходимо в праве піддерево",
    "r1": "Видалення вузла",
    "r2": "Дерево пусте!",
    "r3": "Вузол",
    "r4": "=> переходимо в ліве піддерево",
    "r5": "=> переходимо в праве піддерево",
    "r6": "= вузол",
    "r7": "і вузол не має нащадків => вузол",
    "r8": "= null. Вузол знаходиться на відстані!",
    "r9": "і вузол має правого нащадка => вузол",
    "r10": "= праве піддерево. Вузол знаходиться на відстані!",
    "r11": "і вузол має лувого нащадка => вузол",
    "r12": "= ліве піддерево. Вузол знаходиться на відстані!",
    "r13": "і вузол має двох нащадків => вузол",
    "r14": "= мінімальний вузол з правого піддерева (вузол",
    "r15": "). Потім видалити вузол",
    "r16": "з правого піддерева",
    "o1": "Pre-order обхід",
    "o2": "Показати вузол",
    "o3": "In-order обхід",
    "o4": "Post-order обхід",
    "s1": "Пошук вузла",
    "s2": "Вузла немає в дереві!",
    "s3": "Ісокмий вузол",
    "s4": "=> продовжити пошук в лівому поддереве",
    "s5": "=> продовжити пошук в правому піддереві",
    "s6": "=> вузол знайдений!",
    "s7": "Пошук мінімального вузла",
    "s8": "Мінімальний вузол знайдений!",
    "s9": "Лівий нащадків вузла",
    "s10": "порожній => мінімальний вузол",
    "s11": "Вузол",
    "s12": "має лівого нащадка => продовжити пошук в лівому поддереве",
    "s13": "Пошук максимального вузла",
    "s14": "Максимальний вузол знайдений!",
    "s15": "Правий нащадок вузла",
    "s16": "порожній => максимальний вузол",
    "s17": "Вузол",
    "s18": "має правого нащадка => продовжити пошук в правому піддереві"
  },
  "avl": {
    "title": "АВЛ дерево"
  },
  "legend": {
    "title": "Легенда",
    "initialized": "Дерево ініціалізуване."
  },
  "controls": {
    "node": "Вузол",
    "add": "Додати",
    "addE": "Додати вузол",
    "delete": "Видалити",
    "deleteE": "Видалити вузол",
    "searche": "Знайти",
    "searcheE": "Знайти вузол",
    "prev": "Назад",
    "prevE": "Крок назад",
    "next": "Вперёд",
    "nextE": "Крок вперёд",
    "preorder": "Preorder",
    "preorderE": "Preorder обхід",
    "inorder": "Inorder",
    "inorderE": "Inorder обхід",
    "postorder": "Postorder",
    "postorderE": "Postorder обхід",
    "min": "Min",
    "minE": "Знайти минимальний вузол",
    "max": "Max",
    "maxE": "Знайти максимальний вузол"
  }
}
